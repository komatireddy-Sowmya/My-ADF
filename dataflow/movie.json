{
	"name": "movie",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Ratings",
						"type": "DatasetReference"
					},
					"name": "mlratings"
				},
				{
					"dataset": {
						"referenceName": "movielens",
						"type": "DatasetReference"
					},
					"name": "mlmovies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "output",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "Date"
				},
				{
					"name": "ratingstats"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          userId as short,",
				"          movieId as integer,",
				"          rating as double,",
				"          timestamp as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> mlratings",
				"source(output(",
				"          movieId as integer,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> mlmovies",
				"mlratings derive(timestamp = toDate(seconds(timestamp), 'yyyy-MM-dd')) ~> Date",
				"Date aggregate(groupBy(movieId),",
				"     count_rankings = count(),",
				"          ranking_mean = mean(rating)) ~> ratingstats",
				"mlmovies, ratingstats join(mlmovies@movieId == ratingstats@movieId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"Date sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}